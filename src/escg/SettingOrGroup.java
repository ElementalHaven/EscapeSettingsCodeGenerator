package escg;

public class SettingOrGroup {
	/**
	 * The name of the struct member as it appears in the code.<br>
	 * TitleCase vs camelCase vs snake_case makes no difference.
	 * Used primarily for setting the value
	 * and for copying to the json to be written.
	 */
	public String	codeName;
	/**
	 * The name of the struct member as it will appear in the json.<br>
	 * This is automatically generated by converting {@code codeName}
	 * to snake_case.<br>
	 * Used for reading from and writing to the json file.
	 */
	public String	jsonName;
	/**
	 * Specified with the parameter {@code name:}<br>
	 * The name of the struct member as it will appear
	 * in UIs or console/log messages.<br>
	 * While optional, setting this is highly recommended.
	 * If not present, jsonName will be used in its place.
	 */
	public String	friendlyName;
	/**
	 * Specified with the optional parameter {@code desc:}<br>
	 * Provides additional information about the variable
	 * that might be shown to the user with a tooltip or other mechanism.
	 */
	public String	description;
	/**
	 * Specified with the optional parameter {@code ui:}<br>
	 * Specifies what mechanism should be used to give the user control
	 * over this type in an imgui UI.<br>
	 * If not specified, the UI control will be determined from type
	 * and whether minimum and maximum values have been specified.<br>
	 * Empty groups will be excluded from UIs automatically,
	 * but will still be present in the json.
	 */
	public UIType	uiType	= UIType.DEFAULT;
	/**
	 * Specified with the optional parameter {@code exclude:}<br>
	 * If set to true this variable will not be included in
	 * the json.<br>
	 * If you want to exclude a member from the UI as well,
	 * then uiType should be set to {@code NONE}.<br>
	 * This exists so that public member variables can exist
	 * for the purposes of derived values
	 * (ex: fov converted from degrees to radians).<br>
	 * Normally, all private and protected variables are excluded
	 * and all public variables are included.
	 * Private and protected variables can not be set to included
	 * due to access being needed by various methods
	 * with procedurally generated names.
	 */
	public boolean	exclude	= false;
	
	/**
	 * Sets the info of this Setting or Group to that of the parameter Setting.
	 * Exists so that parameters can be collected in a Setting object
	 * and then applied to an object once the proper type is known.
	 */
	public void copyInfo(Setting toCopy) {
		// these 2 are probably unnecessary
		// as they are determined from
		// the line that triggers the copy operation
		codeName = toCopy.codeName;
		jsonName = toCopy.jsonName;
		
		friendlyName = toCopy.friendlyName;
		description = toCopy.description;
		uiType = toCopy.uiType;
		exclude = toCopy.exclude;
	}
	
	public void setName(String codeName) {
		this.codeName = codeName;
		jsonName = Utils.toSnakeCase(codeName);
		if(friendlyName == null) {
			friendlyName = Utils.snakeToTitleCase(jsonName);
		}
	}
}